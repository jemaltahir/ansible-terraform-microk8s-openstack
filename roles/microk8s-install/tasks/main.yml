- name: Install MicroK8s
  become: true
  snap:
    name: microk8s
    classic: yes
    channel: "{{ microk8s_version }}"

- name: Add login user to microk8s group
  become: yes
  user:
    name: "{{ microk8s_user }}"
    group: microk8s
    append: true

- name: Wait for microk8s to be ready
  become: true
  command: /snap/bin/microk8s.status --wait-ready --timeout 5
  changed_when: False
  register: output_microk8s_install_wait
  until: output_microk8s_install_wait is not failed
  retries: 60


- name: Create kubectl alias
  become: yes
  command: "snap alias microk8s.kubectl kubectl"
  changed_when: false
  register: aliaskubectlout

- name: Create helm3 alias
  become: yes
  command: "snap alias microk8s.helm3 helm"
  changed_when: false
  register: aliashelmout
  when:
    - "'helm3' in microk8s_plugins"
    - microk8s_plugins.helm3

# TODO check if we need this
#- name: Create custom certificates
#  become: yes
#  ansible.builtin.template:
#    src: "{{ microk8s_csr_template }}"
#    dest: /var/snap/microk8s/current/certs/csr.conf.template
#    mode: 0644
#  when: microk8s_csr_template is defined and microk8s_csr_template is file
#  notify:
#  - Refresh certs
#
#- name: Find CRTs
#  find:
#    paths: "/var/snap/microk8s/current/certs/"
#    patterns: "*ca*.crt"
#  register: files_to_copy
#
#- name: Copy certificates
#  become: yes
#  copy:
#    src: "{{ item.path }}"
#    dest: /etc/pki/ca-trust/extracted/
#    mode: 0644
#    remote_src: true
#  with_items: "{{ files_to_copy.files }}"
#
#- name: Trust certificates generated by microk8s
#  become: yes
#  command: "update-ca-trust"
#  register: command_result
#  changed_when: "'0 added, 0 removed' not in command_result.stdout"

# Must check how to get 'novalocal' from a proper source, so it is not hardcoded
# TODO
- name: Enumerate all cluster hosts within the hosts file
  become: yes
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED: microk8s HA Cluster Hosts"
    content: |
      {% for host in groups['master'] %}
      {{ hostvars[host].ansible_default_ipv4.address }} {{ hostvars[host].ansible_hostname }} {{ hostvars[host].ansible_hostname }}.novalocal
      {% endfor %}
      {% if 'compute' in groups %}
      {% for host in groups['compute'] %}
      {{ hostvars[host].ansible_default_ipv4.address }} {{ hostvars[host].ansible_hostname }} {{ hostvars[host].inventory_hostname }}.novalocal
      {% endfor %}
      {% endif %}

- name: get current addons state
  command:
    cmd: microk8s.status --format yaml
  changed_when: no
  register: microk8s_status

- name: set current state fact
  set_fact:
    microk8s_status: "{{ microk8s_status.stdout | from_yaml }}"

- name: enable addons
  become: yes
  loop: "{{ microk8s_status.addons }}"
  loop_control:
    label: "{{ item.name }}"
  command:
    cmd: microk8s.enable {{ item.name }}{% if microk8s_plugins[item.name] != True %}:{{ microk8s_plugins[item.name] }}{% endif %}
  when:
    - item.status == 'disabled'
    - item.name in microk8s_plugins
    - microk8s_plugins[item.name]

- name: disable addons
  become: yes
  loop: "{{ microk8s_status.addons }}"
  loop_control:
    label: "{{ item.name }}"
  command:
    cmd: microk8s.disable {{ item.name }}
  when:
    - item.status == 'enabled'
    - item.name in microk8s_plugins
    - not microk8s_plugins[item.name]
